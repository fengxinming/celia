import DOM from './core';
import {
  each,
  childNodes,
  parentNode,
  sibling,
  siblings
} from '../utils';

function nodeList(list, fn) {
  const arr = [];
  each(list, (dom) => {
    fn(dom, arr);
  });
  return new DOM(arr);
}

function dir(list, fn, cur) {
  return nodeList(list, (dom, arr) => {
    fn(dom, cur, (elem) => {
      arr.append(elem);
    });
  });
}

export default function (proto) {
  proto.find = function (selector) {
    return nodeList(this, (dom, arr) => {
      const list = dom.querySelectorAll(selector);
      each(list, (elem) => {
        arr.append(elem);
      });
    });
  };
  proto.parent = function () {
    return nodeList(this, (dom, arr) => {
      let pNode = parentNode(dom);
      pNode && arr.append(pNode);
    });
  };
  proto.children = function () {
    return nodeList(this, (dom, arr) => {
      childNodes(dom, (elem) => {
        arr.append(elem);
      });
    });
  };

  proto.next = function () {
    return dir(this, sibling, 'nextElementSibling');
  };

  proto.nextAll = function () {
    return dir(this, siblings, 'nextElementSibling');
  };

  proto.prev = function () {
    return dir(this, sibling, 'previousElementSibling');
  };

  proto.prevAll = function () {
    return dir(this, siblings, 'previousElementSibling');
  };

}
